var documenterSearchIndex = {"docs":
[{"location":"#FerriteVis.jl","page":"Home","title":"FerriteVis.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FerriteVis.jl is a small package to visualize your Ferrite.jl results. Currently all Makie backends are supported and thus, you can visualize your results in a GLMakie window, inside Pluto/Jupyter notebooks via WGLMakie and produce nice vector graphics with CairoMakie.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the future this package tries to adapt also other plotting packages, such as Plots.jl and PGFPlotsX.jl. Contributions are highly welcome.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install FerriteVis.jl with the in-built package manager of Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add FerriteVis","category":"page"},{"location":"","page":"Home","title":"Home","text":"Do your computation with Ferrite.jl and save the used DofHandler and solution vector into a variable. Pass those two variables into the MakiePlotter constructor","category":"page"},{"location":"","page":"Home","title":"Home","text":"plotter = MakiePlotter(dh,u)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now, you can use all common Makie plotting functionalities, such as mesh, surface and arrows. For a more detailed example, check out the tutorial page.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#Solve-a-Boundary-Value-Problem","page":"Tutorial","title":"Solve a Boundary Value Problem","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Start with solving a boundary value problem as you would usually do with Ferrite. It is crucial that you safe your used DofHandler and solution vector because we need to pass those objects to MakiePlotter.","category":"page"},{"location":"tutorial/#Plot-your-results","page":"Tutorial","title":"Plot your results","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Currently, surface, mesh, arrows and their mutating analogues with ! are defined for MakiePlotter. Due to the nature of the documentation we need WGLMakie, however, you can simply exchange any WGLMakie call by GLMakie.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"import JSServe # hide\nJSServe.Page(exportable=true, offline=true) # hide","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can start by plotting your mesh","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"import FerriteVis\nusing Ferrite\nimport WGLMakie\nWGLMakie.set_theme!(resolution=(800, 400)) # hide\n\ngrid = generate_grid(Hexahedron,(3,3,3))\nFerriteVis.wireframe(grid,markersize=50,strokewidth=2)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"FerriteVis.jl also supports showing labels for Ferrite.AbstractGrid entities, such as node- and celllabels.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"grid = generate_grid(Quadrilateral,(3,3))\nFerriteVis.wireframe(grid,markersize=5,strokewidth=1,nodelabels=true,celllabels=true)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"If you solve some boundary value problem with Ferrite.jl keep in mind to safe your dh::DofHandler and solution vector u::Vector{T} in some variable. With them, we create the MakiePlotter struct that dispatches on Makie.surface, Makie.mesh, Makie.arrows, warp_by_vector and plot_grid","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"include(\"ferrite-examples/incompressible-elasticity.jl\")\n\nplotter = FerriteVis.MakiePlotter(dh,u)\nFerriteVis.arrows(plotter)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Per default, all plotting functions grab the first field in the DofHandler, but of course you can plot a different field as well. The next plot will show the pressure instead of the displacement","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"FerriteVis.solutionplot(plotter,field=:p)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For certain 2D problems it makes sense to visualize the result as a surface plot. To showcase the combination with the mutating versions of the plotting functions, the mesh function is plotted below the surface plot","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"FerriteVis.surface(plotter)\nFerriteVis.solutionplot!(plotter,colormap=:magma)\nWGLMakie.current_figure()","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"However, in structural mechanics we often would like to see the deformed configuration, so there is a custom function warp_by_vector, which does the same as warp by glyph in Paraview.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"include(\"ferrite-examples/plasticity.jl\")\nplotter = FerriteVis.MakiePlotter(dh,u)\n\nFerriteVis.solutionplot(plotter,colormap=:thermal,deformation_field=:u)\nFerriteVis.wireframe!(plotter,deformation_field=:u,markersize=25,strokewidth=1)\nWGLMakie.current_figure()","category":"page"}]
}
